#include <stdio.h>

#define NX 6
#define TIME_STEPS 1

// Function to perform Thomas Algorithm (Tridiagonal Matrix Algorithm)
void thomasAlgorithm(int n, double a[], double b[], double c[], double d[]) 
{
    double c_star[n], d_star[n];

    // Forward sweep
    c_star[0] = c[0] / b[0];
    d_star[0] = d[0] / b[0];
    for (int i = 1; i < n; i++) 
    {
        double m = 1.0 / (b[i] - a[i] * c_star[i - 1]);
        c_star[i] = c[i] * m;
        d_star[i] = (d[i] - a[i] * d_star[i - 1]) * m;
    }

    // Back substitution
    d[n - 1] = d_star[n - 1];
    for (int i = n - 2; i >= 0; i--) 
    {
        d[i] = d_star[i] - c_star[i] * d[i + 1];
    }
}

int main() 
{
    double lambda = 0.020875;
    double dx = 1.0, dt = 1.0;

    double u_old[NX] = {100.0, 0.0, 0.0, 0.0, 0.0, 50.0};
    double u_new[NX];

    double r = lambda;
    double a[NX - 2], b[NX - 2], c[NX - 2];
    
    for (int i = 0; i < NX - 2; i++) 
    {
        a[i] = -r / 2.0;
        b[i] = 1.0 + r;
        c[i] = -r / 2.0;
    }

    for (int t = 0; t < TIME_STEPS; t++) 
    {
        double d[NX - 2];

        for (int i = 1; i < NX - 1; i++) 
        {
            d[i - 1] = (1.0 - r) * u_old[i] + (r / 2.0) * (u_old[i - 1] + u_old[i + 1]);
        }
        d[0] += r / 2.0 * u_old[0];
        d[NX - 3] += r / 2.0 * u_old[NX - 1];

        thomasAlgorithm(NX - 2, a, b, c, d);

        for (int i = 1; i < NX - 1; i++) 
        {
            u_new[i] = d[i - 1];
        }
        u_new[0] = 100.0;
        u_new[NX - 1] = 50.0;

        for (int i = 0; i < NX; i++) 
        {
            u_old[i] = u_new[i];
        }
    }

    printf("u(1,1) = %.4f\n", u_new[1]);
    printf("u(2,1) = %.4f\n", u_new[2]);
    printf("u(3,1) = %.4f\n", u_new[3]);
    printf("u(4,1) = %.4f\n", u_new[4]);

    return 0;
}
